##############master_db #####################


---

- name: Grab Gateway Private Ip
  hosts: gateway_server
  become: true
  gather_facts: false
  tasks: 

    ## Grabbing Private IP of GAteway Server and storing it to variable
    - name: Grab Private Ip
      shell: ifconfig ztyxa6biwy | grep -E -o 'inet [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d' ' -f2
      register: command_output
    
    - name: Set command output as a fact
      set_fact:
        gateway_output: "{{ command_output.stdout }}"

- name: PostgreSQL-14 Master-Slave Replication Automation
  hosts: master
  become: true
  vars_files:
  - "../vars/vars.yml"
  tasks:
    - name: Configure Master Server
      block:
        ## Whitelisting Gateway Private IP on MAster Server
        - name: Ip whitelist for gateway
          command: iptables -A INPUT -s {{ hostvars[item].command_output.stdout }} -p tcp --dport 5432 -j ACCEPT
          loop: "{{ groups['gateway_server'] }}" 

        - name: Save IP Rules
          command: netfilter-persistent save

        - name: Reload Net-Persistant
          command: netfilter-persistent reload

        ## Enabling WAL shippin on master node
        - name: Enable WAL shipping on Master
          lineinfile:
            dest: /etc/postgresql/14/main/postgresql.conf
            regexp: "^#?wal_level = .*"
            line: "wal_level = replica"
          notify: restart postgresql  

        ## Grabbing Private IP of Master Node and storing it in a variable
        - name: Grab Private Ip
          shell: ifconfig ztyxa6biwy | grep -E -o 'inet [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d' ' -f2
          register: command_output     

        ## Adding listen added for postgres server on master node's private IP
        - name: Enable listen address
          lineinfile:
            dest: /etc/postgresql/14/main/postgresql.conf
            regexp: "^#?listen_addresses = .*"
            line: "listen_addresses = 'localhost,{{ command_output.stdout }}'"
          notify: restart postgresql 
        
        - name: Set max_connections
          lineinfile:
            dest: /etc/postgresql/14/main/postgresql.conf
            regexp: "^#?max_connections\\s*=.*"
            line: "max_connections = 300"
          notify: restart postgresql

        - name: Allow gateway connection from master
          lineinfile:
            dest: /etc/postgresql/14/main/pg_hba.conf
            line: "host   all    all    {{ hostvars[item].command_output.stdout }}/32   md5"
          loop: "{{ groups['gateway_server'] }}" 
          notify: restart postgresql

        ## Creating User for Percona
        - name: Create PMM User
          postgresql_user:
            db: postgres
            name: "{{ pmm_user }}"
            password: "{{ pmm_password }}"    
            role_attr_flags: "SUPERUSER"
            state: present
          become: yes
          become_user: postgres

        ## Creating User for Replication
        - name: Create PostgreSQL user
          postgresql_user:
            db: postgres
            name: "{{ replication_user }}"
            password: "{{ replication_password }}"          
            role_attr_flags: "REPLICATION"
            state: present
          become: yes
          become_user: postgres

        ## Creating Main Database
        - name: Create PostgreSQL database
          postgresql_db:
            name: "{{ db_name }}"
            state: present
          become: yes
          become_user: postgres

        ## Creating Postgres User 
        - name: Create PostgreSQL user
          postgresql_user:
            db: postgres
            name: "{{ db_user }}"
            password: "{{ db_password }}"
            encrypted: yes
            state: present
            role_attr_flags: "LOGIN"
          become: yes
          become_user: postgres
          notify: restart postgresql

        ## Creating Database Schema and making it private
        - name: Create Database Schema
          postgresql_query:
            db: "{{ db_name }}"
            query: CREATE SCHEMA IF NOT EXISTS {{ db_name }}_schema AUTHORIZATION {{ db_user }}
          become: true
          become_user: postgres

  handlers:
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted
